package find_path

type Point struct {
	x, y, f, h, g int
	parent        *Point
}

func (p *Point) GetG(target *Point) int { // наименьшая стоимость пути в End из стартовой вершины
	// настолько я понял если конец пути находиться на искосок то стоимость клетки 14
	// можно реализовывать стоимость пути по различной поверхности
	if target.x != p.x && target.y != p.y {
		return p.g + 14
	}

	return p.g + 10 // если находиться на 1 линии по Х или У то стоимость 10
}

/* Фактически, функция f(v) — длина пути до цели, которая складывается из пройденного расстояния g(v) и оставшегося расстояния h(v). Исходя из этого, чем меньше значение f(v),
тем раньше мы откроем вершину v, так как через неё мы предположительно достигнем расстояние до цели быстрее всего. Открытые алгоритмом вершины можно хранить в очереди с приоритетом
по значению f(v). А* действует подобно алгоритму Дейкстры и просматривает среди всех маршрутов ведущих к цели сначала те, которые благодаря имеющейся информации
(эвристическая функция) в данный момент являются наилучшими. */

func (p *Point) GetF() { // длина пути до цели, которая складывается из пройденного расстояния g(v) и оставшегося расстояния h(v).
	p.f = p.g + p.h // складываем растояние от клетки до цели и ее стоимость
}

func (p *Point) Equal(b *Point) bool { // сравнивает точки на одинаковость
	return p.x == b.x && p.y == b.y
}
